name: mastodon

services:
  db:
    image: postgres:14-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: mastodon
      POSTGRES_PASSWORD: mastodon_default_password_change_me
      POSTGRES_DB: mastodon_production
    volumes:
      - /DATA/AppData/mastodon/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'mastodon']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mastodon-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - /DATA/AppData/mastodon/redis:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mastodon-network

  mastodon:
    image: nginx:alpine
    restart: unless-stopped
    cpu_shares: 10
    volumes:
      - /DATA/AppData/mastodon/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    expose:
      - 80
    depends_on:
      mastodon-backend:
        condition: service_healthy
      streaming:
        condition: service_healthy
    networks:
      - mastodon-network

  mastodon-backend:
    image: ghcr.io/mastodon/mastodon:v4.4.4
    restart: unless-stopped
    cpu_shares: 70
    container_name: mastodon-backend
    environment:
      - LOCAL_DOMAIN=${LOCAL_DOMAIN}
      - WEB_DOMAIN=${WEB_DOMAIN}
      - SINGLE_USER_MODE=${SINGLE_USER_MODE}
      - STREAMING_API_BASE_URL=${STREAMING_API_BASE_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_NAME=${DB_NAME}
      - DB_PASS=${DB_PASS}
      - DB_PORT=${DB_PORT}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - OTP_SECRET=${OTP_SECRET}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY}
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY}
      - ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY=${ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY}
      - ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT=${ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT}
      - ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY=${ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY}
      - RAILS_ENV=${RAILS_ENV}
      - RAILS_SERVE_STATIC_FILES=${RAILS_SERVE_STATIC_FILES}
      - RAILS_LOG_LEVEL=${RAILS_LOG_LEVEL}
      - PAPERCLIP_ROOT_PATH=${PAPERCLIP_ROOT_PATH}
      - PREPARED_STATEMENTS=${PREPARED_STATEMENTS}
      - MAX_TOOT_CHARS=${MAX_TOOT_CHARS}
      - TRUSTED_PROXY_IP=${TRUSTED_PROXY_IP}
      - RAILS_FORCE_SSL=${RAILS_FORCE_SSL}
    command: bash -c 'rm -f /mastodon/tmp/pids/server.pid && bundle exec rails s -p 3000 -b 0.0.0.0'
    volumes:
      - /DATA/AppData/mastodon/public/system:/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mastodon-network

  streaming:
    image: ghcr.io/mastodon/mastodon-streaming:v4.4.4
    restart: unless-stopped
    cpu_shares: 30
    environment:
      - LOCAL_DOMAIN=${LOCAL_DOMAIN}
      - STREAMING_API_BASE_URL=${STREAMING_API_BASE_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_NAME=${DB_NAME}
      - DB_PASS=${DB_PASS}
      - DB_PORT=${DB_PORT}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - OTP_SECRET=${OTP_SECRET}
    command: node ./streaming/index.js
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mastodon-network

  sidekiq:
    image: ghcr.io/mastodon/mastodon:v4.4.4
    restart: unless-stopped
    cpu_shares: 50
    environment:
      - LOCAL_DOMAIN=${LOCAL_DOMAIN}
      - SINGLE_USER_MODE=${SINGLE_USER_MODE}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_NAME=${DB_NAME}
      - DB_PASS=${DB_PASS}
      - DB_PORT=${DB_PORT}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - OTP_SECRET=${OTP_SECRET}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY}
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY}
      - ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY=${ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY}
      - ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT=${ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT}
      - ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY=${ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY}
      - RAILS_ENV=${RAILS_ENV}
      - PAPERCLIP_ROOT_PATH=${PAPERCLIP_ROOT_PATH}
      - PREPARED_STATEMENTS=${PREPARED_STATEMENTS}
    command: bundle exec sidekiq
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq 6' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mastodon-network

networks:
  mastodon-network:
    driver: bridge

x-casaos:
  index: /
  webui_port: 80
  main: mastodon

  icon: https://cdn.jsdelivr.net/gh/Worph/AppStore@main/Apps/Mastodon/icon.png
  screenshot_link:
    - https://cdn.jsdelivr.net/gh/Worph/AppStore@main/Apps/Mastodon/screenshot-1.png
    - https://cdn.jsdelivr.net/gh/Worph/AppStore@main/Apps/Mastodon/screenshot-2.png
    - https://cdn.jsdelivr.net/gh/Worph/AppStore@main/Apps/Mastodon/screenshot-3.png
  thumbnail: https://cdn.jsdelivr.net/gh/Worph/AppStore@main/Apps/Mastodon/screenshot-1.png

  architectures:
    - amd64
    - arm64
  author: Worph Team
  category: Communication
  description:
    en_us: Decentralized social network server. Join the fediverse and connect with millions across independent servers. Share posts, photos, videos, and follow anyone across the network. Ad-free, algorithm-free, and community-owned.
    fr_fr: Serveur de réseau social décentralisé. Rejoignez le fediverse et connectez-vous avec des millions d'utilisateurs sur des serveurs indépendants. Partagez des posts, photos, vidéos et suivez n'importe qui sur le réseau. Sans publicité, sans algorithme, et géré par la communauté.
    ko_kr: 탈중앙화 소셜 네트워크 서버. 페디버스에 가입하여 독립적인 서버의 수백만 명과 연결하세요. 게시물, 사진, 비디오를 공유하고 네트워크 전체의 누구든 팔로우할 수 있습니다. 광고 없음, 알고리즘 없음, 커뮤니티 소유.
    zh_cn: 去中心化社交网络服务器。加入联邦宇宙，与独立服务器上的数百万人连接。分享帖子、照片、视频，并关注网络中的任何人。无广告、无算法，由社区拥有。
    es_es: Servidor de red social descentralizada. Únete al fediverso y conéctate con millones en servidores independientes. Comparte publicaciones, fotos, videos y sigue a cualquiera en la red. Sin anuncios, sin algoritmos y propiedad de la comunidad.
    de_de: Dezentraler Social-Network-Server. Treten Sie dem Fediverse bei und verbinden Sie sich mit Millionen auf unabhängigen Servern. Teilen Sie Beiträge, Fotos, Videos und folgen Sie jedem im Netzwerk. Werbefrei, algorithmusfrei und gemeinschaftseigen.
  developer: Mastodon gGmbH
  tagline:
    en_us: Decentralized social network - join the fediverse
    fr_fr: Réseau social décentralisé - rejoignez le fediverse
    ko_kr: 탈중앙화 소셜 네트워크 - 페디버스에 가입하세요
    zh_cn: 去中心化社交网络 - 加入联邦宇宙
    es_es: Red social descentralizada - únete al fediverso
    de_de: Dezentrales soziales Netzwerk - treten Sie dem Fediverse bei
  title:
    en_us: Mastodon

  # Pre-install command generates all required secrets and stores persistent config
  pre-install-cmd: |
    mkdir -p /DATA/AppData/mastodon &&
    cd /DATA/AppData/casaos/apps/mastodon &&
    if [ ! -f .env ]; then
      echo "Generating Mastodon configuration..." &&
      SECRET_KEY_BASE=$(docker run --rm ghcr.io/mastodon/mastodon:v4.4.4 bundle exec rake secret) &&
      OTP_SECRET=$(docker run --rm ghcr.io/mastodon/mastodon:v4.4.4 bundle exec rake secret) &&
      VAPID_OUTPUT=$(docker run --rm ghcr.io/mastodon/mastodon:v4.4.4 bundle exec rake mastodon:webpush:generate_vapid_key) &&
      VAPID_PRIVATE_KEY=$(echo "$VAPID_OUTPUT" | grep "VAPID_PRIVATE_KEY" | cut -d'=' -f2) &&
      VAPID_PUBLIC_KEY=$(echo "$VAPID_OUTPUT" | grep "VAPID_PUBLIC_KEY" | cut -d'=' -f2) &&
      ENCRYPTION_OUTPUT=$(docker run --rm ghcr.io/mastodon/mastodon:v4.4.4 bin/rails db:encryption:init) &&
      ENCRYPTION_DETERMINISTIC=$(echo "$ENCRYPTION_OUTPUT" | grep "ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY" | cut -d'=' -f2) &&
      ENCRYPTION_SALT=$(echo "$ENCRYPTION_OUTPUT" | grep "ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT" | cut -d'=' -f2) &&
      ENCRYPTION_PRIMARY=$(echo "$ENCRYPTION_OUTPUT" | grep "ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY" | cut -d'=' -f2) &&
      cat > .env << ENVEOF
      LOCAL_DOMAIN=mastodon-\${domain:-localhost}
      WEB_DOMAIN=mastodon-\${domain:-localhost}
      SINGLE_USER_MODE=true
      STREAMING_API_BASE_URL=https://mastodon-\${domain:-localhost}
      REDIS_HOST=redis
      REDIS_PORT=6379
      DB_HOST=db
      DB_USER=mastodon
      DB_NAME=mastodon_production
      DB_PASS=mastodon_default_password_change_me
      DB_PORT=5432
      SECRET_KEY_BASE=\${SECRET_KEY_BASE}
      OTP_SECRET=\${OTP_SECRET}
      VAPID_PRIVATE_KEY=\${VAPID_PRIVATE_KEY}
      VAPID_PUBLIC_KEY=\${VAPID_PUBLIC_KEY}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY=\${ENCRYPTION_DETERMINISTIC}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT=\${ENCRYPTION_SALT}
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY=\${ENCRYPTION_PRIMARY}
      RAILS_ENV=production
      RAILS_SERVE_STATIC_FILES=true
      RAILS_LOG_LEVEL=warn
      PAPERCLIP_ROOT_PATH=/mastodon/public/system
      PREPARED_STATEMENTS=true
      MAX_TOOT_CHARS=500
      TRUSTED_PROXY_IP=172.16.0.0/12
      RAILS_FORCE_SSL=false
      ENVEOF
      chmod 600 .env &&
      cat > /DATA/AppData/mastodon/nginx.conf << 'NGINXEOF'
      map \$http_upgrade \$connection_upgrade {
          default upgrade;
          '' close;
      }

      upstream backend {
          server mastodon-backend:3000 fail_timeout=0;
      }

      upstream streaming {
          server streaming:4000 fail_timeout=0;
      }

      server {
          listen 80;
          server_name _;

          keepalive_timeout 70;
          client_max_body_size 80M;

          root /dev/null;

          gzip on;
          gzip_disable "msie6";
          gzip_vary on;
          gzip_proxied any;
          gzip_comp_level 6;
          gzip_buffers 16 8k;
          gzip_http_version 1.1;
          gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml image/x-icon;

          location / {
              try_files \$uri @proxy;
          }

          location ~ ^/(system|packs) {
              add_header Cache-Control "public, max-age=2419200, immutable";
              add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
              try_files \$uri @proxy;
          }

          location ^~ /api/v1/streaming {
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto https;
              proxy_set_header Proxy "";

              proxy_pass http://streaming;
              proxy_buffering off;
              proxy_redirect off;
              proxy_http_version 1.1;
              proxy_set_header Upgrade \$http_upgrade;
              proxy_set_header Connection \$connection_upgrade;

              tcp_nodelay on;
          }

          location @proxy {
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto https;
              proxy_set_header Proxy "";

              proxy_pass http://backend;
              proxy_buffering on;
              proxy_redirect off;
              proxy_http_version 1.1;
              proxy_set_header Upgrade \$http_upgrade;
              proxy_set_header Connection \$connection_upgrade;

              proxy_cache_bypass \$http_upgrade;

              tcp_nodelay on;
          }

          error_page 500 501 502 503 504 /500.html;
      }
      NGINXEOF
      echo "Configuration generated successfully!";
    else
      echo "Configuration already exists, skipping generation.";
    fi

  # Post-install script sets up database and creates admin account
  post-install-cmd: |
    echo "Waiting for Mastodon services to be ready..." &&
    sleep 30 &&
    echo "Running database migrations..." &&
    docker exec mastodon-backend bundle exec rails db:migrate &&
    docker exec mastodon-backend bundle exec rails db:seed &&
    echo "Database setup complete!" &&
    echo "" &&
    echo "Creating admin account..." &&
    ADMIN_EMAIL="${email:-admin@mastodon-${domain}}" &&
    ADMIN_USERNAME="admin" &&
    ADMIN_OUTPUT=$(docker exec mastodon-backend tootctl accounts create $ADMIN_USERNAME --email "$ADMIN_EMAIL" --confirmed --role Owner 2>&1) &&
    ADMIN_PASSWORD=$(echo "$ADMIN_OUTPUT" | grep -oP 'New password: \K.*' || echo "$ADMIN_OUTPUT") &&
    echo "" &&
    echo "==================================================" &&
    echo "  MASTODON INSTALLATION COMPLETE!" &&
    echo "==================================================" &&
    echo "" &&
    echo "Access: https://mastodon-${domain}" &&
    echo "" &&
    echo "Login Credentials:" &&
    echo "  Username: $ADMIN_USERNAME" &&
    echo "  Email: $ADMIN_EMAIL" &&
    echo "  Password: $ADMIN_PASSWORD" &&
    echo "" &&
    echo "IMPORTANT: Change your password immediately after logging in!" &&
    echo "" &&
    echo "Configuration file: /DATA/AppData/casaos/apps/mastodon/.env" &&
    echo "=================================================="

  tips:
    before_install:
      en_us: |
        **Fully Automated Installation**

        Everything is automated - just click install!

        **What happens automatically:**
        - Configuration directory creation
        - Secret keys generation (SECRET_KEY_BASE, OTP_SECRET)
        - VAPID keys generation for web push notifications
        - Database setup and migrations
        - Admin account creation with username "admin"
        - Environment file configured with your domain

        **After Installation:**
        The post-install output will show your login credentials:
        - Username: admin
        - Email: (your configured email)
        - Password: (auto-generated)

        **Important:**
        1. Access your instance at `https://mastodon-$domain`
        2. Log in with the provided credentials
        3. **Change your password immediately** in Settings
        4. Complete your profile setup
        5. Configure server settings in Admin panel

        **Configuration Files:**
        - Environment: `/DATA/AppData/casaos/apps/mastodon/.env`
        - Nginx config: `/DATA/AppData/mastodon/nginx.conf`

        **Optional: Email Notifications**
        To enable email notifications, edit `/DATA/AppData/casaos/apps/mastodon/.env`:
        ```
        SMTP_SERVER=smtp.your-provider.com
        SMTP_PORT=587
        SMTP_LOGIN=your@email.com
        SMTP_PASSWORD=your_smtp_password
        SMTP_FROM_ADDRESS=notifications@mastodon-$domain
        ```
        Then restart: `docker restart mastodon-backend mastodon-mastodon-streaming-1 mastodon-sidekiq-1`
